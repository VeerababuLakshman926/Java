Building Blocks
Variables:
​
A variable is an identifier that refers/ stores some value / values. 
​
syntax: 
​
datatype variable_name = value;
​
We can categorize variables into 3 types.
​
1. Local Variables 
2. Static Variables 
3. Instance Variables 
​
​
Local Variables:
​
A variable which is created inside a method is known as local variable. 
​
example:
​
​
public class LocalVariables {
​
	public static void m1() {
		String name= "Digital Lync";  // Local Variable
		System.out.println(name);
		
	}
	public static void main(String[] args) {
		  int age=21;  //Local variable
		  System.out.println(age);
		  LocalVariables.m1();
		  String name="Hitech City"; // Local Variable
		  System.out.println(name);
		
	}
}
​
​
Key points:
​
1. Local Variables can be accessed only with in the method. 
2. Local Variables must be initialized before usage because local variables does not get the default values.
​
Task:
​
PS: Create any 3 local variables and run them.

public class exLocalvariable {
	
	public static void main(String[] args) {
		int a=10;
		String name="lakshman";
		char x='a';
		System.out.println(a);
		System.out.println(name);
		System.out.println(x);
		
	}

}
​
​
Static Variables: 
​
Any variable that is created with static keyword is known as static variable. 
​
​
public class StaticVariables {
	
	static int counter=1; 
	static int anti; //if we did not assign any value it will assign default value as o.
	public static void main(String[] args) {
		
		System.out.println(anti); // or System.out.println(StaticVariables.anti);both are same if we are inside the class
		
		System.out.println(StaticVariables.counter); // or System.out.println(counter); both are same 
		
		System.out.println(counter++); //output = 1 first it will print the current value and later it will update

		System.out.println(counter); //output=2

		System.out.println(++counter); //output=3 first it will update and later it will print

		StaticVariables.counter++; //or counter++;

		System.out.println(counter); //output =4 because it is already updated

		++counter; //or StaticVariables.++counter;
		
		System.out.println(counter); //output=5
	}

}

​
​
Key points: 
​
1. Static variables can be accessed in any method of that class. 
2. Static Variable always have only copy of the value.
​
PS: Implement simple like feature of facebook.
​
​
public class LikesDemo {
	
	
	static int likes=0;
	static void likethepost() {
		LikesDemo.likes++; //or likes++;
	}
	static void takebackLikefromthepost() {
		LikesDemo.likes--; //or likes--;
	}
	
	public static void main(String[] args) {
		LikesDemo.likethepost();
		System.out.println(LikesDemo.likes);
		LikesDemo.likethepost();
		LikesDemo.likethepost();
		LikesDemo.likethepost();
		LikesDemo.likethepost();
		LikesDemo.takebackLikefromthepost();
		System.out.println(likes);
		
	}

}

​
Problem Statement: 
​
Implement instagram like and dislike feature. 
​
​
​
​