In Java, Constructors cannot be inherited instead a super class constructor 
is always called by the sub class constructor by default when ever there is 
inhertiance relationship between them.
​
​
​
class A{
	
	  A(){
		  System.out.println("A() constructor");
	  }
}
class B extends A{
	
	 B(){
		
		  System.out.println("B() constructor");
	  }
}
	
​
​
public class ConstructorInheritance {
​
	 public static void main(String[] args) {
		B bb= new B();
		
	}
}
​
Polymorphism: 
​
Poly means many and morphism means forms. 
​
Polymorphism means many / multiple forms. 
​
It is a process where an entity (method) provides different functionalities based 
on different inputs. 
​
Polymorphism can be implemented using method overloading and method overiding. 
​
Method Overloading: 
​
A method should follow the below rules to be overloaded. 
​
1. The method name must be same.
2. There should be a difference in number of arguments or type of arguments.
​
class Calc{
	
	void add(int a, int b) {
		System.out.println(a+b);
	}
		
	void add(int a, int b, int c) {
		System.out.println(a+b+c);

	}
	
	
}
public class MethodOverloadingDemo {
	
	
	public static void main(String[] args) {
		Calc calc = new Calc();
		calc.add(10,20);
		calc.add(30, 40, 50);
	}
	

}

​
​
Problem Statement: 
​
Implement a simple payment application that accepts different modes of payment. 
​
​
​
class CashOnDelivery{
	String housenumber;
	String landmark;
	String area;
	String city;
	public CashOnDelivery(String housenumber, String landmark, String area, String city) {
		super();
		this.housenumber = housenumber;
		this.landmark = landmark;
		this.area = area;
		this.city = city;
	}
	
	void showDetails() {
		System.out.println(this.housenumber+"\t"+this.landmark+"\t"+this.area+"\t"+this.city);
	}
}
class Creditcard{
	String nameOnTheCard;
	long mobilenumber;
	int cvv;
	public Creditcard(String nameOnTheCard, long mobilenumber, int cvv) {
		super();
		this.nameOnTheCard = nameOnTheCard;
		this.mobilenumber = mobilenumber;
		this.cvv = cvv;
	}
	void showDetails() {
		System.out.println(this.nameOnTheCard+"\t"+this.mobilenumber+"\t"+this.cvv);
	}
	
}
class UPI{
	long mobilenumber;

	public UPI(long mobilenumber) {
		super();
		this.mobilenumber = mobilenumber;
	}
	void showDetails() {
		System.out.println(this.mobilenumber);
	}
}

class payment{
	void pay(CashOnDelivery cod) {
		cod.showDetails();
	}
	void pay(UPI upi) {
		upi.showDetails();
	}
	void pay(Creditcard cc) {
		cc.showDetails();
	}
	
	
}
public class PaymentDemo {
	public static void main(String[] args) {
		CashOnDelivery cod1 = new CashOnDelivery("10/25-6","near ramalayam","Narayanapeta","Amalapuram");
		CashOnDelivery cod2 = new CashOnDelivery("10/525-6","near Durga temple","Narayan Nagar","Amalapuram");
		payment pay1 = new payment();
		
		cod1.showDetails();
		cod2.showDetails();
		
		System.out.println("----------");
		pay1.pay(cod1);
		pay1.pay(cod2);
		
		System.out.println("-------------------------------------------------------------------");
		UPI upi1 = new UPI(7703535482l);
		UPI upi2 = new UPI(454525154121l);
		upi1.showDetails();
		upi2.showDetails();
		
		System.out.println("----------");
		pay1.pay(upi1);
		pay1.pay(upi2);
		
		System.out.println("-------------------------------------------------------------------");
		Creditcard cc1 = new Creditcard("lakshman", 42522322555l, 128);
		Creditcard cc2 = new Creditcard("veerababu",85252224555l, 143);
		cc1.showDetails();
		cc2.showDetails();
		
		
		
		System.out.println("----------");
		
		pay1.pay(cc1);
		pay1.pay(cc2);
	}

}
